<template>
  <div>

  </div>
</template>

<script>
export default {
  props: {
    node: {},
    parentNode: {},
    isRootNode: {},

    nodes: {},
    components: {},
    timename: {},
    timetracks: {}
  },
  data () {
    return {
      camera: false
    }
  },
  methods: {
    init () {
      let fov = 75
      let rect = this.$parent.$el.getBoundingClientRect()
      let aspect = rect.width / rect.height
      let near = 0.1
      let far = 100000000000000

      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far)
      this.camera.position.z = 500
      this.camera.lookAt(0,0,0)
    }
  },
  mounted () {
    this.init()
    this.$emit('ready', this)
    this.$emit('exec', () => {
      let item = this.timetracks.find(t => t.title === this.node.title && t.progress > 0.001 && t.progress < 1)
      if (item) {
        this.camera.position.z = item.progress * -200 + 500
      }
    });
  },
  created () {
    this.$on('addToParent', ({ parent }) => {
      // console.log(this.node.title, 'addToParent', parent.node.title)
    })
    this.$on('addChild', ({ child }) => {
      console.log(this.node.title, 'addChild', child.node.title)
    })
    this.$on('removeFromParent', ({ parent }) => {
      // console.log(this.node.title, 'removeFromParent', parent.node.title)
    })
    this.$on('removeChild', ({ child }) => {
      // console.log(this.node.title, 'removeChild', child.node.title)
    })
  },
  beforeDestory () {
    this.$emit('remove', this)
  }
}
</script>

<style>

</style>
